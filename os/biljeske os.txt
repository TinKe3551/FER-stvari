==== 21.5.2025. ====

Dodjeljivanje spremnika straničenjem

logički adresni prostor:
- 2**p veličina stranice
- m adresnih bitova dijeli se na
    - p bitova koji određuju adresu u stranici
    - r = m - p bitova -> redni broj stranice
- m = 32 ili 64 ili 16


fizički radni spremnik:
- 2**p vel. okv.
- stranice se mogu smjestiti u bilo koji okvir
    - osnovna ideja je da se izbjegne fragmentacija

podjela:
- program na stranice
- ram na okvire
- disk na clustere

RAM - random access memory, bilo kojem okviru može se pristupiti u O(1) vremenu

tablica prevođenja logičke adrese u fizičku adresu
- ne moraju sve stranice programa biti u randnom spremniku
- stupac sa rednim brojevima stranica i stupac sa bitovima prisutnosti (za svaku stranicu piše je li na njoj prisutan neki program)
- u cache se pohranjuju informacije vezane za prevođenje kako bi se brže pristupilo ramu

koje dijelove spremnika koriste dretve? (u logičkom smislu, ne u fizičkom)
- instrukcije
    - sve skupa u zajedničkom prostoru
    - svaka dretva ima pointer na funkciju u zajedničkom prostoru koju ona izvršava
- u procesu se sve instrukcije nalaze u segmentu funkcija

- lokalne varijable
    - sve na programskom stogu lol (ko u arh)

- nešto treće

- konstante
    - smještene prije varijabla koje se mijenjaju

- gomila
    - zajednički prostor svih dretvi itd itd
    - "raste" prema većim adresama

- stog
    - okvir stoga - osnovni sadržaj stoga: parametri funkcija, povratna adresa, registri koji će se mijenjati (kontekst), lokalne varijable
    - stog "raste" prema manjim adresama
    - svaka dretva ima svoj stogs


proces:
- instrukcije
- zajednički podaci: globalne varijable i konstante
- gomila
- stog za dretvu d2
- stog za dretvu itd
- stog za dretvu d1 (glavna)

rezervirani i dodijeljeni adresni prostor
- za proces se razervira prostor
- dijelovi koji se koriste su dodijeljeni procesu, a ostali se mogu dodijeliti nekom drugom procesu


sklopovska potpora straničenju u 32-bitnoj arhitekturi intel x86
- zadnjih 12 bita LA kopira se u zadnjih 12 bita fragmentacija
- za svaki proces postoji tablica prevođenja
    - i ta tablica se također dijeli na komade od 4 kb  kako bi stala u stranice ili što već
    - zapisi su 32-bitni -> tablica mora imati kilobajt redaka
    - 20 bita je redni broj okvira, 12 zastavice
    - tablica prevođenja je hijerarhijski uređena
        - postoji registar u kojem je zapisana njena adresa
        - direktorij stranica
            - 1024 zapisa
            - tablice stranica (tj kazaljke na njih)
            - tablice stranica imaju svaka po 1024 kazaljki na stranice valjda


- adresa direktorija 10 bitova
- adresa tablice u direktoriju 10 bitova
- zastavice 12 bitova

- fizička adresa 20 bitova


TLB - translation lookaside buffer - informacije zapisane u cache-u vezane za pronalazak neke fizičke adrese


straničenje na zahtjev (demand paging)
- adresiranje neprisutne stranice -> prekid zbog promašaja -> dohvat stranice na disku -> prebacivanje stranice u prazan okvir -> nadopuna tablice stranica -> ponavljanje instrukcije

u čemu se prekid zbog promašaja razlikuje od ostalih prekida
- prekid zbog promašaja stranice ide usred instrukcije, a ne nakon nje
- ta instrukcija se mora ponoviti
- pohrana konteksta mora biti riješena na sklopovskoj razini kako računalo ne bi bilo ubitačno sporo
    - u procesoru je potreban duplikat svakog registra

strategije zamjene stranica
- ako se sadržaj stranice nije mijenjao (tj ako je ostala čista), onda se stranica ne mora prepisivati na disk
- u tablicu prevođenja uvodi se poseban bit za označavanje čistoće dakle eto jedna zastavica
    - zastavice btw:
        - V bit prisutnosti
        - W zastavica readonly
        - O zastavica "stranicu upotrebljava OS"
        - Wt - svako pisanje u stranicu prepisuje stranicu iz priručnog u glavni spremnik (tako da se ne bi podaci izgubili ako npr nestane struje)
        - A u stranicu se pristupaloW
        - D stranica je nečista
        - Gl stranica se smatra globalnom

- FIFO - za izbacivanje stranice odabire se ona koja je najdulje u radnom spremniku, ovo se koristi na višeprocesorskim računalima
- LRU (least recently used) - izbaci stranicu koja se najkasnije koristila, za ovo nema dovoljno bitova pa se koristi pojednostavljena verzija ("satni algoritam") i to se koristi na jednoprocesorskim računalima
- optimalna strategija
    - izbaci stranicu koja se najdalje u budućnosti neće koristiti
    - ovo bi valjda lisan al gaib koristio kada ne bi bilo zabranjeno koristiti računala
    - s ovim se nekako uspoređuju osmišljene strategije


praktične aproksimacije strategije LRU

- primjer
    - nadopuniti tablice stranica posmačnim registrima u koje bi se moglo posmaknuti bitove pristupa
    - ovo bi za pokriti samo sat vremena trebalo nekoliko milijuna registara

- primjer 2 stranice se podjele u 4 tipa ovisno o zastavicama A i D:
    - tip 0: (A,D) = (0,0)
    - tip 1: (A,D) = (0,1)
    - tip 2: (A,D) = (1,0)
    - tip 3: (A,D) = (1,1)

- evo nas sad napokon kod satnog algoritma
    - sve se stranice u okvirima svrstavaju u kružnu listu po redu prispjeća
    - stranica se izbacuje ako je njezina zastvica A = 0, inače se preskače pa joj se zastavica A postavlja na 0
    - ako kazaljka obiđe cijelu listu i ne naiđe na A=0, postavit će sve na 0 i izbaciti stranicu s koje je započela obilazak


nešto sa dodjeljivanjem okvira
    - procesu koji ima puno promašaja dodjeljuju se ram okviri koji se uzmu procesima koji imaju malo promašaja