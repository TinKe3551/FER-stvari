# DO NOT EDIT THIS FILE !!!!!!!!!!!!
#
# CONAS v3.0 output file
#
# Processor name: ARM 7
#
8 ; memory word width
#
32 ; address width
#
#
# Original file: Z:/home/tinke/FER-stvari/arh1r/arm/pokazni_mi1_2.a
#
#
<1,0>	                      ;start
<2,0>	00000000  40 1D A0 E3 ;        mov     r1, #0x1000     ; podaci počinju od adrese 0x1000
<3,0>	00000004  40 DB A0 E3 ;        mov     sp, #0x10000    ; stog
<4,0>	                      ;        
<5,0>	00000008  02 00 2D E9 ;        stmfd   sp!, {r1}       ; pozivanje potprograma obradi
<6,0>	0000000C  01 00 00 EB ;        bl      obradi
<7,0>	00000010  04 D0 8D E2 ;        add     sp, sp, #4
<8,0>	                      ;
<9,0>	                      ;kraj                            ; eto gotovo program je odradio svoje
<10,0>	00000014  56 34 12 EF ;        swi     0x123456
<11,0>	                      ;
<12,0>	                      ;obradi
<13,0>	                      ;
<14,0>	                      ;; r0 - paritet podatka
<15,0>	                      ;; r1 - pokazivač na podatak
<16,0>	                      ;; r2 - podatak
<17,0>	                      ;; r3 - brojač petlje
<18,0>	                      ;; r4 - onaj broj koji treba staviti tamo gdje su podaci sa neparnim paritetom
<19,0>	                      ;
<20,0>	00000018  1F 40 2D E9 ;        stmfd   sp!, {r0, r1, r2, r3, r4, lr}   ; spremanje konteksta
<21,0>	                      ;
<22,0>	0000001C  18 10 9D E5 ;        ldr     r1, [sp, #24]   ; učitavanje i inicijalizacija
<23,0>	00000020  40 3F A0 E3 ;        mov     r3, #0x100      
<24,0>	00000024  D4 41 9F E5 ;        ldr     r4, fofofo
<25,0>	                      ;
<26,0>	                      ;petlja1
<27,0>	                      ;
<28,0>	00000028  04 20 91 E4 ;        ldr     r2, [r1], #4        ; učitavanje podatka
<29,0>	                      ;
<30,0>	0000002C  00 20 8F E5 ;        str     r2, arg         ; stavljanje r2 kao argument na lokaciju iza bl i pozivanje potprograma paritet
<31,0>	00000030  07 00 00 EB ;        bl      paritet
<32,0>	00000034! 00 00 00 00 ;arg     dw      0
<33,0>	                      ;
<34,0>	00000038  01 00 50 E3 ;        cmp     r0, #1          ; sad ce na r0 biti zapisano 0 ako podatak ima paran paritet a ako je paritet neparan
<35,0>	0000003C  00 40 81 05 ;        streq   r4, [r1]        ; onda će u r0 biti 1 i onda treba u memoriji taj podatak zamijeniti sa 0xf0f0f0f0
<36,0>	                      ;
<37,0>	00000040  01 30 43 E2 ;        sub     r3, r3, #1          ; brojač se smanji za 1 i ako je veći od 0 onda ide još jedan prolaz petlje
<38,0>	00000044  00 00 53 E3 ;        cmp     r3, #0
<39,0>	00000048  F6 FF FF 1A ;        bne     petlja1
<40,0>	                      ;
<41,0>	                      ;kr_obr
<42,0>	0000004C  1F 40 BD E8 ;        ldmfd   sp!, {r0, r1, r2, r3, r4, lr}   ; obnova konteksta i vraćanje iz potprograma
<43,0>	00000050  0E F0 A0 E1 ;        mov     pc, lr
<44,0>	                      ;
<45,0>	                      ;paritet
<46,0>	                      ;
<47,0>	                      ;; r0 - količina jedinica u podatku, kasnije paritet
<48,0>	                      ;; r1 - podatak kojem se provjerava paritet
<49,0>	                      ;
<50,0>	00000054  04 E0 8E E2 ;        add     lr, lr, #4
<51,0>	00000058  06 40 2D E9 ;        stmfd   sp!, {r1, r2, lr}       ; spremanje konteksta, učitavanje i inicijalizacija
<52,0>	0000005C  00 10 9E E5 ;        ldr     r1, [lr]
<53,0>	00000060  00 20 A0 E3 ;        mov     r2, #0
<54,0>	                      ;
<55,0>	                      ;petlja2
<56,0>	00000064  81 10 B0 E1 ;        movs    r1, r1, lsl #1  ; svaki bit podatka prebacuje se jedan za drugim u c
<57,0>	00000068  00 00 A0 E2 ;        adc     r0, r0, #0      ; i vrijednost c se pribraja u r0 (dakle, ako je bit jednak 1 vrijednost r0 će se povećati za 1, a inače će ostati ista)
<58,0>	0000006C  00 00 51 E3 ;        cmp     r1, #0          ; kada je r1 == 0, onda nema više jedinica za prebrojati i ova petlja je gotova
<59,0>	00000070  FB FF FF 1A ;        bne     petlja2         ; na kraju će u r0 biti broj jedinica koje su se nalazile u podatku r1
<60,0>	                      ;
<61,0>	                      ;
<62,0>	00000074  01 00 00 E2 ;        and     r0, r0, #1      ; n & 1 == n % 2
<63,0>	                      ;
<64,0>	                      ;kr_par
<65,0>	00000078  06 40 BD E8 ;        ldmfd   sp!, {r1, r2, lr}
<66,0>	0000007C  0E F0 A0 E1 ;        mov     pc, lr
<67,0>	                      ;
<68,0>	                      ;
<69,0>	                      ;
<70,0>	                      ;
<71,0>	                      ;        org     0x200
<72,0>	00000200! F0 F0 F0 F0 ;fofofo  dw      0xf0f0f0f0
#
# Debug Data
#
.debug:
<!h32,0> 
#
#
# Assembling: OK