
start
; r1, r2, r3 - pokazivači na memorijske adrese ulaznih podataka
; r4, r5, r6 - podaci
; r7 - broj 0x8080
        mov     r1, #0x300      ; inicijalizacija r1, r2, r3, i r7
        mov     r2, #0x500
        mov     r3, #0x700
        mov     r8, #0x1000
        ldr     r7, 0x204
        mov     sp, #0x5000

petlja
        ldrh    r4, [r1], #2    ; učitavanje podataka
        ldrh    r5, [r2], #2
        ldrh    r6, [r3], #2
        
        cmp     r4, r7          ; program se prekida kada je barem jedan od učitanih podataka jednak 0x8080
        beq     kraj

        stmfd   sp!, {r4, r5, r6}       ; spremanje argumenata i pozivanje potprograma srednja
        bl      srednja
        add     sp, sp, #12

        ldr     r0, rez         ; učitavanje rezultata sa fiksne lokacije

        
        str     r0, [r8], #4    ; upisivanje rezultata u memoriju

        b       petlja


kraj
        swi     0x123456



srednja
; r1, r2, r3 - podaci
        stmfd   sp!, {r1, r2, r3, lr}
        ldr     r1, [sp, #16]   ; učitavanje podataka u r1, r2 i r3
        ldr     r2, [sp, #20]
        ldr     r3, [sp, #24]

        stmfd   sp!, {r1}       ; na r1, r2 i r3 primjenjuje se bzp_2k
        bl      bzp_2k
        mov     r1, r0
        add     sp, sp, #4

        stmfd   sp!, {r2}
        bl      bzp_2k
        mov     r2, r0
        add     sp, sp, #4

        stmfd   sp!, {r3}
        bl      bzp_2k
        mov     r3, r0
        add     sp, sp, #4

; r1 - zbroj podataka
; r2 - predznak rezultata
; r3 - rezultat koji će se upisati u adresu rez

        add     r1, r1, r2
        add     r1, r1, r3

        mov     r2, #1
        mov     r3, #0

        cmp     r1, #0  ; postavlja se predznak rezultata, a r1 se postavlja u apsolutnu vrijednost
        mvnmi   r1, r1
        addmi   r1, r1, #1
        mvnmi   r2, r2
        addmi   r2, r2, #1

dj                      ; r1 se uzastopnim oduzimanjem dijeli s 3
        subs    r1, r1, #3
        add     r3, r3, #1
        bpl     dj
        sub     r3, r3, #1

        cmp     r2, #0  ; rezultat se prenosi u 2'k oblik
        mvnmi   r3, r3
        addmi   r3, r3, #1

        str     r3, rez ; upisivanje rezultata u memoriju
        ldmfd   sp!, {r1, r2, r3, lr}
        mov     pc, lr


bzp_2k
        stmfd   sp!, {r1, lr}   ; spremanje konteksta i učitavanje r1
        ldr     r1, [sp, #8]
        
        movs    r1, r1, lsl #17 ; bitshiftamo broj za 17 mjesta ulijevo da ubacimo njegov bit za predznak u zastavicu c
        mov     r1, r1, lsr #17

        mvncs   r1, r1          ; sada ostaje apsolutna vrijednost koju po potrebi mijenjamo u 2'k negativan broj
        addcs   r1, r1, #1

        mov     r0, r1          ; onda se rezultat upisuje u r0 i izlazi se iz potprograma
        ldmfd   sp!, {r1, lr}
        mov     pc, lr

; to bi trebalo biti to testirat ću program kad mi se bude dalo


        org     0x200
rez     dw      0
zadnji  dw      0x8080   

        org     0x300
        dw      0x3, 0x5, 0x8080
        org     0x500
        dw      0x6, 0x5, 0x8080
        org     0x700
        dw      0x9, 0x8001, 0x8080

        org     0x1000
ispis   dw      0, 0, 0, 0

        
        
        
