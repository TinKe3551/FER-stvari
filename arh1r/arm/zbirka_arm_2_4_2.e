# DO NOT EDIT THIS FILE !!!!!!!!!!!!
#
# CONAS v3.0 output file
#
# Processor name: ARM 7
#
8 ; memory word width
#
32 ; address width
#
#
# Original file: Z:/home/tinke/FER-stvari/arh1r/arm/zbirka_arm_2_4_2.a
#
#
<1,0>	                      ;
<2,0>	                      ;main
<3,0>	00000000  40 DB A0 E3 ;        mov     sp, #0x10000
<4,0>	00000004  F4 10 9F E5 ;        ldr     r1, podatak
<5,0>	                      ;
<6,0>	00000008  02 00 2D E9 ;        stmfd   sp!, {r1}
<7,0>	0000000C  02 00 00 EB ;        bl      avgb
<8,0>	00000010  04 D0 8D E2 ;        add     sp, sp, #4
<9,0>	                      ;
<10,0>	00000014  E4 01 8F E5 ;        str     r0, rez
<11,0>	                      ;
<12,0>	                      ;end
<13,0>	00000018  56 34 12 EF ;        swi     0x123456
<14,0>	                      ;
<15,0>	                      ;
<16,0>	                      ;avgb
<17,0>	0000001C  06 40 2D E9 ;        stmfd   sp!, {r1, r2, lr}
<18,0>	00000020  0C 10 9D E5 ;        ldr     r1, [sp, #12]
<19,0>	00000024  00 00 A0 E3 ;        mov     r0, #0
<20,0>	00000028  00 20 A0 E3 ;        mov     r2, #0
<21,0>	                      ;
<22,0>	                      ;loop1                   ; pojedini 8-bitni brojevi iz r1 zbrajaju se u r2
<23,0>	0000002C  01 00 A0 E1 ;        mov     r0, r1
<24,0>	00000030  FF 00 00 E2 ;        and     r0, r0, #255    ; izdvajanje zadnjih 8 bitova iz registra
<25,0>	                      ;
<26,0>	00000034  00 20 82 E0 ;        add     r2, r2, r0
<27,0>	                      ;
<28,0>	00000038  21 14 A0 E1 ;        mov     r1, r1, lsr #8  ; registar se logički pomiče udesno za 8 mjesta kako bi se prešlo na sljedećih 8 bitova
<29,0>	0000003C  00 00 51 E3 ;        cmp     r1, #0          ; petlja prestaje kada više nema bitova različitih od nule
<30,0>	00000040  F9 FF FF 1A ;        bne     loop1
<31,0>	                      ;
<32,0>	00000044  00 00 A0 E3 ;        mov     r0, #0
<33,0>	                      ;
<34,0>	                      ;loop2                           ; zbroj se cjelobrojno dijeli s 4, a rezultat se zapisuje u r0
<35,0>	00000048  04 20 42 E2 ;        sub     r2, r2, #4
<36,0>	0000004C  01 00 80 E2 ;        add     r0, r0, #1
<37,0>	00000050  00 00 52 E3 ;        cmp     r2, #0
<38,0>	00000054  FB FF FF 5A ;        bpl     loop2
<39,0>	                      ;
<40,0>	00000058  01 00 40 E2 ;        sub     r0, r0, #1
<41,0>	                      ;
<42,0>	                      ;kr_avgb
<43,0>	0000005C  06 40 BD E8 ;        ldmfd   sp!, {r1, r2, lr}
<44,0>	00000060  0E F0 A0 E1 ;        mov     pc, lr
<45,0>	                      ;
<46,0>	                      ;
<47,0>	                      ;        org     0x100
<48,0>	00000100! 05 4F 01 03 ;podatak dw      0x03014f05
<49,0>	                      ;
<50,0>	                      ;        org     0x200
<51,0>	00000200! 00 00 00 00 ;rez     dw      0
#
# Debug Data
#
.debug:
<!h48,0> <!h51,0> 
#
#
# Assembling: OK